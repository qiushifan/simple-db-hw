package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate joinPredicate;
    private OpIterator leftChild;
    private OpIterator rightChild;
    private Iterator<Tuple> it;
    private List<Tuple> allres;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.joinPredicate = p;
        this.leftChild = child1;
        this.rightChild = child2;
        this.allres = new ArrayList<>();
    }

    public JoinPredicate getJoinPredicate() {
        return this.joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return this.leftChild.getTupleDesc().getFieldName(this.joinPredicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return this.rightChild.getTupleDesc().getFieldName(this.joinPredicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(this.leftChild.getTupleDesc(), this.rightChild.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        this.leftChild.open();
        this.rightChild.open();
        while(this.leftChild.hasNext()){
            Tuple left = this.leftChild.next();
            while (this.rightChild.hasNext()){
                Tuple right = this.rightChild.next();
                if(this.joinPredicate.filter(left,right)){
                    Tuple newTuple = new Tuple(this.getTupleDesc());
                    for (int i = 0; i < this.leftChild.getTupleDesc().numFields(); i++) {
                        newTuple.setField(i, left.getField(i));
                    }
                    for (int i = this.leftChild.getTupleDesc().numFields(); i < this.getTupleDesc().numFields(); i++) {
                        newTuple.setField(i, right.getField(i-this.leftChild.getTupleDesc().numFields()));
                    }
                    this.allres.add(newTuple);
                }
            }
            this.rightChild.rewind();
        }
        this.it = this.allres.iterator();
        super.open();
    }

    public void close() {
        super.close();
        this.rightChild.close();
        this.leftChild.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.it = this.allres.iterator();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if (it != null && it.hasNext()) {
            return it.next();
        } else
            return null;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[] { this.leftChild,this.rightChild };
    }

    @Override
    public void setChildren(OpIterator[] children) {
        if(children.length == 2){
            this.leftChild = children[0];
            this.rightChild = children[1];
        }
    }

}
